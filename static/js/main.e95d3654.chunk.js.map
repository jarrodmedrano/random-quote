{"version":3,"sources":["actions/index.js","components/NewQuote.js","components/TweetQuote.js","components/QuoteBox.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["GET_NEW_QUOTE","getNewQuote","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","dispatch","res","wrap","_context","prev","next","axios","sent","type","payload","data","stop","this","_x","apply","arguments","NewQuote","react_default","createElement","id","onClick","props","Component","connect","TweetQuote","createQuote","_this","concat","quote","author","href","target","rel","state","QuoteBox","__html","createAuthor","dangerouslySetInnerHTML","components_NewQuote","components_TweetQuote","App","className","components_QuoteBox","actions","Boolean","window","location","hostname","match","initialState","rootReducer","length","undefined","action","assign","store","createStore","composeWithDevTools","applyMiddleware","reduxThunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qZAEaA,EAAgB,gBAEhBC,EAAc,iCAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAM,SAAAC,EAAMC,GAAN,IAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACbC,MAAU,2CADG,OACzBL,EADyBE,EAAAI,KAE/BP,EAAS,CAAEQ,KAAMjB,EAAekB,QAASR,EAAIS,OAFd,wBAAAP,EAAAQ,SAAAZ,EAAAa,SAAN,gBAAAC,GAAA,OAAApB,EAAAqB,MAAAF,KAAAG,YAAA,ICCrBC,mLAEF,OACIC,EAAApB,EAAAqB,cAAA,UAAQC,GAAG,YAAYC,QAASR,KAAKS,MAAM7B,aAA3C,oBAHe8B,aAURC,cAAQ,KAAM,CAAC/B,eAAf+B,CAA6BP,GCZtCQ,6MAEJC,YAAc,WACZ,GAAGC,EAAKL,MAAMX,KACZ,mDAAAiB,OAAoDD,EAAKL,MAAMX,KAAKkB,MAApE,OAAAD,OAA+ED,EAAKL,MAAMX,KAAKmB,iFAKjG,OACEZ,EAAApB,EAAAqB,cAAA,KAAGY,KAAMlB,KAAKa,cAAeM,OAAO,SAASC,IAAI,uBAC/Cf,EAAApB,EAAAqB,cAAA,UAAQC,GAAG,eAAX,uBAXiBG,aA0BVC,cANS,SAACU,GACvB,MAAO,CACLvB,KAAMuB,EAAML,QAIDL,CAAyBC,GCxBlCU,6MACJT,YAAc,WACZ,GAAGC,EAAKL,MAAMX,KACZ,MAAO,CAACyB,OAAQT,EAAKL,MAAMX,KAAKkB,UAIpCQ,aAAe,WACb,GAAGV,EAAKL,MAAMX,KACZ,OAAOgB,EAAKL,MAAMX,KAAKmB,gFAKzB,OACEZ,EAAApB,EAAAqB,cAAA,OAAKC,GAAG,aACNF,EAAApB,EAAAqB,cAAA,KAAGC,GAAG,OAAOkB,wBAAyBzB,KAAKa,gBAG3CR,EAAApB,EAAAqB,cAAA,KAAGC,GAAG,UACHP,KAAKwB,gBAERnB,EAAApB,EAAAqB,cAACoB,EAAD,MACArB,EAAApB,EAAAqB,cAACqB,EAAD,cAvBejB,aAoCRC,cANS,SAACU,GACvB,MAAO,CACLvB,KAAMuB,EAAML,QAIDL,CAAyBW,GCnClCM,qMAEF5B,KAAKS,MAAM7B,+CAIX,OACEyB,EAAApB,EAAAqB,cAAA,OAAKuB,UAAU,OACbxB,EAAApB,EAAAqB,cAAA,UAAQuB,UAAU,cAAlB,0BAGAxB,EAAApB,EAAAqB,cAACwB,EAAD,cAXUpB,cAmBHC,cAAQ,KAAMoB,EAAdpB,CAAuBiB,GCblBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+EChBAC,EAAe,CACnBrB,MAAO,IAYMsB,EATK,WAAkC,IAAjCjB,EAAiClB,UAAAoC,OAAA,QAAAC,IAAArC,UAAA,GAAAA,UAAA,GAAzBkC,EAAcI,EAAWtC,UAAAoC,OAAA,EAAApC,UAAA,QAAAqC,EAClD,OAAOC,EAAO7C,MACZ,KAAKjB,EACH,OAAOG,OAAO4D,OAAO,GAAIrB,EAAO,CAACL,MAAOyB,EAAO5C,UACjD,QACE,OAAOwB,YCATsB,EAAQC,sBAAYN,EAAa,GAAIO,8BACzCC,0BAAgBC,OAMlBC,IAASC,OAAO5C,EAAApB,EAAAqB,cAAC4C,EAAA,EAAD,CAAUP,MAAOA,GAAOtC,EAAApB,EAAAqB,cAAC6C,EAAD,OAAoBC,SAASC,eAAe,SF+G9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e95d3654.chunk.js","sourcesContent":["import * as axios from \"axios\";\n\nexport const GET_NEW_QUOTE = 'GET_NEW_QUOTE';\n\nexport const getNewQuote = () => async dispatch => {\n  const res = await axios.get('https://talaikis.com/api/quotes/random/');\n  dispatch({ type: GET_NEW_QUOTE, payload: res.data });\n};","import React, {Component} from 'react';\nimport connect from \"react-redux/es/connect/connect\";\nimport {getNewQuote} from \"../actions\";\n\n\nclass NewQuote extends Component {\n  render() {\n    return (\n        <button id=\"new-quote\" onClick={this.props.getNewQuote}>\n          New Quote\n        </button>\n    );\n  }\n}\n\nexport default connect(null, {getNewQuote})(NewQuote);","import React, {Component} from 'react';\nimport connect from \"react-redux/es/connect/connect\";\n\nclass TweetQuote extends Component {\n\n  createQuote = () => {\n    if(this.props.data) {\n      return `https://www.twitter.com/intent/tweet?text=${this.props.data.quote} - ${this.props.data.author}`;\n    }\n  };\n\n  render() {\n    return (\n      <a href={this.createQuote()} target=\"_blank\" rel=\"noopener noreferrer\">\n        <button id=\"tweet-quote\">\n          Tweet Quote\n        </button>\n      </a>\n    );\n  }\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.quote\n  }\n};\n\nexport default connect(mapStateToProps)(TweetQuote);\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport NewQuote from \"./NewQuote\";\nimport TweetQuote from \"./TweetQuote\";\n\nclass QuoteBox extends Component {\n  createQuote = () => {\n    if(this.props.data) {\n      return {__html: this.props.data.quote};\n    }\n  };\n\n  createAuthor = () => {\n    if(this.props.data) {\n      return this.props.data.author;\n    }\n  };\n\n  render() {\n    return (\n      <div id=\"quote-box\">\n        <p id=\"text\" dangerouslySetInnerHTML={this.createQuote()}>\n        </p>\n\n        <p id=\"author\">\n          {this.createAuthor()}\n        </p>\n        <NewQuote />\n        <TweetQuote />\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.quote\n  }\n};\n\nexport default connect(mapStateToProps)(QuoteBox);\n","import React, { Component } from 'react';\nimport QuoteBox from \"./components/QuoteBox\";\nimport './App.css';\nimport { connect } from 'react-redux';\nimport * as actions from './actions';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.getNewQuote();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Random Quote Generator\n        </header>\n        <QuoteBox />\n      </div>\n    );\n  }\n}\n\n\n\nexport default connect(null, actions)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {GET_NEW_QUOTE} from '../actions';\n\nconst initialState = {\n  quote: {}\n};\n\nconst rootReducer = (state = initialState, action) => {\n    switch(action.type) {\n      case GET_NEW_QUOTE:\n        return Object.assign({}, state, {quote: action.payload});\n      default:\n        return state\n    }\n};\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport reduxThunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux'\nimport rootReducer from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(rootReducer, {}, composeWithDevTools(\n  applyMiddleware(reduxThunk),\n  // other store enhancers if any\n));\n\n\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}